{"version":3,"sources":["../src/array/index.ts","../src/date-time/index.ts","../src/string/index.ts","../src/file/index.ts","../src/logger/init-default-logger.ts","../src/other/ini-config.ts","../src/zod/create-union-schema.ts","../src/zod/evm-address-schema.ts","../src/zod/evm-private-key-schema.ts","../src/zod/format-zod-error.ts","../src/zod/ip-schema.ts","../src/other/progress-state.ts","../src/other/telegram.ts","../src/other/queue.ts","../src/other/index.ts","../src/proxy/index.ts","../src/random/index.ts"],"sourcesContent":["export const onlyUnique = <T>(value: T, index: number, array: T[]) =>\n  array.indexOf(value) === index;\n\nexport const sortStrings = (a: string, b: string) => a.localeCompare(b);\n\nexport const splitIntoAvgChunks = <T>(arr: T[], maxChunkSize: number) => {\n  const res = [];\n\n  const chunks = Math.ceil(arr.length / maxChunkSize);\n  const chunkSize = Math.ceil(arr.length / chunks);\n\n  for (let i = 0; i < arr.length; i += chunkSize) {\n    const chunk = arr.slice(i, i + chunkSize);\n    res.push(chunk);\n  }\n\n  return res;\n};\n\nexport const formatShortString = (\n  str: string,\n  symbolsCount: number,\n  endSymbols?: number\n) => {\n  if (str.length <= symbolsCount * 2) return str;\n\n  const start = str.substring(0, symbolsCount);\n  const end = str.substring(str.length - (endSymbols || symbolsCount));\n\n  return `${start}...${end}`;\n};\n","import {\n  addSeconds,\n  formatRelative,\n  differenceInMinutes,\n  formatDistanceToNowStrict,\n} from \"date-fns\";\nimport { replaceAll } from \"../string\";\n\nconst distanceReplacers = [\n  { search: \" seconds\", replace: \"s\" },\n  { search: \" minutes\", replace: \"m\" },\n  { search: \" hours\", replace: \"h\" },\n  { search: \" days\", replace: \"d\" },\n  { search: \" months\", replace: \"mth\" },\n  { search: \" years\", replace: \"y\" },\n  { search: \" second\", replace: \"s\" },\n  { search: \" minute\", replace: \"m\" },\n  { search: \" hour\", replace: \"h\" },\n  { search: \" day\", replace: \"d\" },\n  { search: \" month\", replace: \"mth\" },\n  { search: \" year\", replace: \"y\" },\n];\n\nexport const formatRel = (sec: number) => {\n  const time = addSeconds(new Date(), sec);\n\n  const relative = formatRelative(time, new Date());\n\n  const relFormatted =\n    differenceInMinutes(time, new Date()) > 24 * 60\n      ? relative\n      : relative.replace(\"today at \", \"\").replace(\"tomorrow at \", \"\");\n\n  const distance = replaceAll(\n    formatDistanceToNowStrict(time),\n    distanceReplacers\n  );\n\n  return `${relFormatted} (${distance})`;\n};\n","export const replaceAll = (\n  str: string,\n  replacers: { search: string; replace: string }[]\n) => {\n  return replacers.reduce(\n    (s, { search, replace }) => s.replaceAll(search, replace),\n    str\n  );\n};\n","import fs from \"fs\";\nimport path from \"path\";\n\nconst encoding = \"utf-8\";\n\nexport const createFiles = (paths: string[]) => {\n  paths.forEach((filePath) => {\n    const absolutePath = path.resolve(filePath);\n\n    if (fs.existsSync(absolutePath)) return;\n\n    const isDirectory = path.extname(filePath) === \"\";\n\n    if (isDirectory) {\n      fs.mkdirSync(absolutePath, { recursive: true });\n      console.log(`Directory created: ${absolutePath}`);\n      return;\n    }\n\n    const dirname = path.dirname(absolutePath);\n\n    if (!fs.existsSync(dirname)) {\n      fs.mkdirSync(dirname, { recursive: true });\n      console.log(`Directory created: ${dirname}`);\n    }\n\n    fs.writeFileSync(absolutePath, \"\", \"utf-8\");\n    console.log(`File created: ${absolutePath}`);\n  });\n};\n\nexport const writeFile = (\n  name: fs.PathOrFileDescriptor,\n  data: string | Uint8Array\n) => {\n  if (typeof name === \"string\") {\n    createFiles([name]);\n  }\n\n  fs.writeFileSync(name, data, { encoding });\n};\n\nexport const readdir = (dir: fs.PathLike) => fs.readdirSync(dir);\n\nexport const readFile = (name: fs.PathOrFileDescriptor) =>\n  fs.readFileSync(name, { encoding });\n\nexport const readByLine = (name: string) =>\n  readFile(name).split(/\\r?\\n/).filter(Boolean);\n\nexport const appendFile = (\n  name: fs.PathOrFileDescriptor,\n  data: string | Uint8Array\n) => fs.appendFileSync(name, data, { encoding });\n","import { format, createLogger, transports } from \"winston\";\nimport { nowPrefix } from \"../other\";\n\nconst customFormat = format.printf(\n  ({ level, message, timestamp }) => `${timestamp} | ${level} | ${message}`\n);\n\nconst initDefaultLogger = (consoleLevel: \"info\" | \"debug\" = \"info\") => {\n  const time = nowPrefix();\n\n  const formatTimestamp = format.timestamp({ format: \"HH:mm:ss\" });\n\n  const logger = createLogger({\n    transports: [\n      new transports.Console({\n        level: consoleLevel,\n        format: format.combine(\n          format.colorize(),\n          format.splat(),\n          formatTimestamp,\n          customFormat\n        ),\n      }),\n      new transports.File({\n        level: \"debug\",\n        filename: `./logs/${time}_debug.log`,\n        format: format.combine(format.splat(), formatTimestamp, customFormat),\n      }),\n      new transports.File({\n        level: \"info\",\n        filename: `./logs/${time}_info.log`,\n        format: format.combine(format.splat(), formatTimestamp, customFormat),\n      }),\n      new transports.File({\n        level: \"error\",\n        filename: `./logs/${time}_error.log`,\n        format: format.combine(format.splat(), formatTimestamp, customFormat),\n      }),\n    ],\n  });\n\n  return logger;\n};\n\nexport default initDefaultLogger;\n","import * as ini from \"ini\";\n\nimport { formatZodError } from \"../zod\";\nimport { ZodOptional, z } from \"zod\";\nimport { nowPrefix } from \".\";\nimport { readFile, writeFile } from \"../file\";\n\nclass IniConfig<F extends z.ZodTypeAny, D extends z.ZodTypeAny> {\n  private readonly fileName: string;\n\n  private readonly schema: z.ZodObject<{\n    fixed: F | ZodOptional<F>;\n    dynamic: D | ZodOptional<D>;\n  }>;\n\n  public readonly fixed: z.infer<F>;\n  private _dynamic: z.infer<D>;\n\n  private onDynamicError: (msg: string) => void;\n  private defaultValues: { fixed: z.infer<F>; dynamic: z.infer<D> };\n\n  public constructor(params: {\n    fileName: string;\n    fixedSchema: F;\n    dynamicSchema: D;\n    onDynamicError: (msg: string) => void;\n    defaultValues: { fixed: z.infer<F>; dynamic: z.infer<D> };\n  }) {\n    const {\n      fileName,\n      fixedSchema,\n      dynamicSchema,\n      onDynamicError,\n      defaultValues,\n    } = params;\n\n    this.fileName = fileName;\n    this.onDynamicError = onDynamicError;\n    this.defaultValues = defaultValues;\n\n    this.schema = z.object({\n      dynamic: Object.keys(defaultValues.dynamic).length\n        ? dynamicSchema\n        : dynamicSchema.optional(),\n      fixed: Object.keys(defaultValues.fixed).length\n        ? fixedSchema\n        : fixedSchema.optional(),\n    });\n\n    try {\n      const { fixed, dynamic } = this.getConfigData();\n\n      this._dynamic = dynamic;\n      this.fixed = fixed;\n    } catch (error) {\n      this.updateConfig();\n      throw error;\n    }\n  }\n\n  private getConfigData() {\n    const iniContent = readFile(this.fileName);\n    const parsedIni = ini.parse(iniContent);\n    const result = this.schema.safeParse(parsedIni);\n\n    if (result.success) return result.data;\n\n    const errorMessage = formatZodError(result.error.issues);\n\n    throw new Error(errorMessage);\n  }\n\n  public dynamic() {\n    try {\n      this._dynamic = this.getConfigData().dynamic;\n    } catch (error) {\n      const msg = (error as Error)?.message || \"undefined error\";\n\n      this.onDynamicError(\n        `used the previous dynamic value due to error. Details: ${msg}`\n      );\n    }\n\n    return this._dynamic;\n  }\n\n  initializeConfig = () => {\n    writeFile(this.fileName, ini.stringify(this.defaultValues));\n  };\n\n  checkIsConfigValid() {\n    try {\n      const iniContent = readFile(this.fileName);\n      const parsedIni = ini.parse(iniContent);\n\n      return this.schema.safeParse(parsedIni).success;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  updateConfig() {\n    if (this.checkIsConfigValid()) return;\n\n    try {\n      const splittedName = this.fileName.split(\"/\");\n      const fileName = splittedName[splittedName.length - 1];\n\n      const backupFileName =\n        splittedName.slice(0, -1).join(\"/\") + `/${nowPrefix()}_${fileName}`;\n\n      const configBackup = readFile(this.fileName);\n      writeFile(backupFileName, configBackup);\n    } catch (error) {}\n\n    this.initializeConfig();\n  }\n}\n\nexport default IniConfig;\n","/* eslint-disable no-magic-numbers */\n/* eslint-disable func-style */\nimport { Primitive, z, ZodLiteral, ZodNever } from \"zod\";\n\ntype MappedZodLiterals<T extends readonly Primitive[]> = {\n  -readonly [K in keyof T]: ZodLiteral<T[K]>;\n};\n\nfunction createManyUnion<\n  A extends Readonly<[Primitive, Primitive, ...Primitive[]]>,\n>(literals: A) {\n  return z.union(\n    literals.map((value) => z.literal(value)) as MappedZodLiterals<A>,\n  );\n}\n\nexport default function createUnionSchema<T extends readonly []>(\n  // eslint-disable-next-line no-unused-vars\n  values: T,\n): ZodNever;\n\nexport default function createUnionSchema<T extends readonly [Primitive]>(\n  // eslint-disable-next-line no-unused-vars\n  values: T,\n): ZodLiteral<T[0]>;\n\nexport default function createUnionSchema<\n  T extends readonly [Primitive, Primitive, ...Primitive[]],\n  // eslint-disable-next-line no-unused-vars\n>(values: T): z.ZodUnion<MappedZodLiterals<T>>;\n\nexport default function createUnionSchema<T extends readonly Primitive[]>(\n  values: T,\n) {\n  if (values.length > 1) {\n    return createManyUnion(\n      values as typeof values & [Primitive, Primitive, ...Primitive[]],\n    );\n  } else if (values.length === 1) {\n    return z.literal(values[0]);\n  } else if (values.length === 0) {\n    return z.never();\n  }\n  throw new Error(\"array must have a length\");\n}\n","import { z } from \"zod\";\n\nconst evmAddressSchema = z\n  .string()\n  .refine((value) => /^(0x)?[0-9a-fA-F]{40}$/.test(value), {\n    message: \"Invalid Ethereum address format\",\n  })\n  .transform((value) => (value.startsWith(\"0x\") ? value : `0x${value}`));\n\nexport default evmAddressSchema;\n","import { z } from \"zod\";\n\nconst evmPrivateKeySchema = z\n  .string()\n  .refine((value) => /^(0x)?[0-9a-fA-F]{64}$/.test(value), {\n    message: \"Invalid Ethereum private key format\",\n  })\n  .transform((value) => (value.startsWith(\"0x\") ? value : `0x${value}`));\n\nexport default evmPrivateKeySchema;\n","import { z } from \"zod\";\n\nconst transform = (issue: z.ZodIssue) =>\n  `[${issue.path.join(\".\")}] ${issue.message}`;\n\nconst formatZodError = (issues: z.ZodIssue[]) =>\n  issues.map(transform).join(\"\\n\");\n\nexport default formatZodError;\n","import { z } from \"zod\";\n\nconst ipOrDomainPattern =\n  /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:(?!-)[A-Za-z0-9-]{1,63}(?<!-)\\.?)+(?:[A-Za-z]{2,6})$/;\n\nconst ipSchema = z.string().refine((value) => ipOrDomainPattern.test(value), {\n  message: \"Invalid IP or domain format\",\n});\n\nexport default ipSchema;\n","import { formatRel } from \"../date-time\";\n\nclass ProgressState {\n  private allCount: number;\n  private threshold: number;\n  private prevTasksTimeMs: number[];\n  private leftCount: number;\n  private currStartTimeMs: number | null;\n\n  /**\n   * @param {number} allCount\n   * @param {number=} threshold\n   */\n  constructor(allCount: number, threshold: number = 1.5) {\n    this.allCount = allCount;\n    this.threshold = threshold;\n\n    this.prevTasksTimeMs = [];\n    this.leftCount = allCount - this.prevTasksTimeMs.length;\n    this.currStartTimeMs = null;\n  }\n\n  startTask(): void {\n    this.currStartTimeMs = Date.now();\n  }\n\n  endTask(): void {\n    this.prevTasksTimeMs.push(Date.now() - (this.currStartTimeMs as number));\n    this.currStartTimeMs = null;\n    this.leftCount -= 1;\n  }\n\n  get doneCount(): number {\n    return this.allCount - this.leftCount;\n  }\n\n  countStateStr(): string {\n    return `${this.doneCount}/${this.allCount}`;\n  }\n\n  predictRemainingTime(): number {\n    const median = this.getMedian(this.prevTasksTimeMs);\n    const absoluteDifferences = this.prevTasksTimeMs.map((time) =>\n      Math.abs(time - median)\n    );\n    const medianAbsoluteDifference = this.getMedian(absoluteDifferences);\n\n    const filteredTasks = this.prevTasksTimeMs.filter(\n      (time, index) =>\n        absoluteDifferences[index] <= this.threshold * medianAbsoluteDifference\n    );\n\n    const filteredAverageTimePerTask = this.getAverage(filteredTasks);\n\n    const remainingTime = filteredAverageTimePerTask * this.leftCount;\n\n    return Math.round(remainingTime / 1000);\n  }\n\n  private getMedian(array: number[]): number {\n    const sortedArray = [...array].sort((a, b) => a - b);\n    const middle = Math.floor(sortedArray.length / 2);\n\n    if (sortedArray.length % 2 === 0) {\n      return (sortedArray[middle - 1] + sortedArray[middle]) / 2;\n    } else {\n      return sortedArray[middle];\n    }\n  }\n\n  private getAverage(array: number[]): number {\n    return array.reduce((sum, time) => sum + time, 0) / array.length;\n  }\n\n  approxEndStr(): string {\n    if (!this.prevTasksTimeMs.length) return \"end undefined\";\n\n    return `${formatRel(this.predictRemainingTime())}`;\n  }\n}\n\nexport default ProgressState;\n","import { onlyUnique } from \"../array\";\n\ninterface Message {\n  message: {\n    chat: {\n      id?: number;\n    };\n    text?: string;\n    date?: number;\n  };\n}\n\nclass Telegram {\n  private chatIds: number[];\n  private url: string;\n  private allowedUpdatesSec?: number;\n  private parseMode?: \"Markdown\" | \"HTML\";\n\n  constructor(\n    token: string,\n    chatIds: number[] | number,\n    options: {\n      allowedUpdatesSec?: number;\n      parseMode?: \"Markdown\" | \"HTML\";\n    } = {}\n  ) {\n    if (!token || !chatIds) {\n      throw new Error(\"telegram token and ids are required\");\n    }\n    this.chatIds = typeof chatIds === \"number\" ? [chatIds] : chatIds;\n    this.url = `https://api.telegram.org/bot${token}`;\n\n    const { allowedUpdatesSec, parseMode } = options;\n\n    this.allowedUpdatesSec = allowedUpdatesSec;\n    this.parseMode = parseMode;\n  }\n\n  static formatMarkdownText(text: string): string {\n    const escapeSymbols = [\"_\", \"*\", \"`\", \"[\"];\n\n    let formattedText = text;\n\n    for (const escapeSymbol of escapeSymbols) {\n      formattedText = formattedText.replaceAll(\n        escapeSymbol,\n        `\\\\${escapeSymbol}`\n      );\n    }\n\n    return formattedText;\n  }\n\n  static formatHtmlText(text: string): string {\n    const replacers = [\n      { searchValue: \"<\", replaceValue: \"&lt;\" },\n      { searchValue: \">\", replaceValue: \"&gt;\" },\n      { searchValue: \"&\", replaceValue: \"&amp;\" },\n    ];\n\n    let formattedText = text;\n\n    for (const { searchValue, replaceValue } of replacers) {\n      formattedText = formattedText.replaceAll(searchValue, replaceValue);\n    }\n\n    return formattedText;\n  }\n\n  async sendMessage(text: string): Promise<void> {\n    for (const id of this.chatIds) {\n      const query = this.parseMode\n        ? new URLSearchParams({\n            chat_id: String(id),\n            text,\n            parse_mode: this.parseMode,\n          }).toString()\n        : new URLSearchParams({ chat_id: String(id), text }).toString();\n      await fetch(`${this.url}/sendMessage?${query}`).catch((e) =>\n        console.error(e)\n      );\n    }\n  }\n\n  clearUpdates(lastUpdateId: number): void {\n    fetch(`${this.url}/getUpdates?offset=${lastUpdateId}`);\n  }\n\n  static getMarkdownLink(text: string, url: string): string {\n    return `[${text}](${url})`;\n  }\n\n  async __getUpdates(): Promise<Message[]> {\n    const allowed_updates = [\"message\"].join(\",\");\n\n    const query = new URLSearchParams({ allowed_updates }).toString();\n\n    const res = await fetch(`${this.url}/getUpdates?${query}`);\n\n    const data = (await res.json()) as any;\n\n    if (!data?.result?.length) return [];\n\n    const lastUpdateId = data.result[data.result.length - 1].update_id + 1;\n\n    this.clearUpdates(lastUpdateId);\n\n    return data.result;\n  }\n\n  async getUpdates(): Promise<string[]> {\n    const updates = await this.__getUpdates();\n\n    const filtered = updates\n      .filter((msg) => {\n        if (!this.chatIds.includes(msg?.message?.chat?.id as any)) return false;\n        if (!msg?.message?.text) return false;\n\n        if (this.allowedUpdatesSec) {\n          const msgTime = msg?.message?.date;\n\n          if (!msgTime) return false;\n\n          const allowedMessageTime =\n            Math.round(Date.now() / 1000) - this.allowedUpdatesSec;\n\n          if (msgTime < allowedMessageTime) return false;\n        }\n\n        return true;\n      })\n      .map((msg) => msg?.message?.text)\n      .filter(onlyUnique)\n      .filter(Boolean);\n\n    return filtered as string[];\n  }\n}\n\nexport default Telegram;\n","class Queue<T> {\n  protected storage: T[];\n\n  public constructor(storage?: T[]) {\n    this.storage = storage ?? [];\n  }\n\n  public push(element: T) {\n    this.storage.push(element);\n  }\n\n  public pushMany(...elements: T[]) {\n    this.storage.push(...elements);\n  }\n\n  public shift() {\n    if (this.isEmpty()) return null;\n\n    return this.storage.shift() as T;\n  }\n\n  public isEmpty() {\n    return this.storage.length === 0;\n  }\n\n  public size() {\n    return this.storage.length;\n  }\n\n  public toString() {\n    return this.storage.map(String).join(\", \");\n  }\n}\n\nexport default Queue;\n","import IniConfig from \"./ini-config\";\nimport ProgressState from \"./progress-state\";\nimport Telegram from \"./telegram\";\nimport Queue from \"./queue\";\n\nexport { IniConfig, ProgressState, Telegram, Queue };\n\nexport const nowPrefix = () => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = (now.getMonth() + 1).toString().padStart(2, \"0\");\n  const day = now.getDate().toString().padStart(2, \"0\");\n  const hours = now.getHours().toString().padStart(2, \"0\");\n  const minutes = now.getMinutes().toString().padStart(2, \"0\");\n  const seconds = now.getSeconds().toString().padStart(2, \"0\");\n\n  return `${year}-${month}-${day}_${hours}-${minutes}-${seconds}`;\n};\n\nexport const sleep = (sec: number) =>\n  new Promise((resolve) => setTimeout(resolve, Math.round(sec * 1000)));\n\nexport const getObjectKeys = <T extends object>(obj: T) => {\n  return Object.keys(obj) as Array<keyof T>;\n};\n\nexport const formatUrlParams = (\n  searchParams: Record<string, string | number>\n) => {\n  const stringSearchParams: Record<string, string> = getObjectKeys(\n    searchParams\n  ).reduce<Record<string, string>>(\n    (acc, key) => ({ ...acc, [key]: String(searchParams[key]) }),\n    {}\n  );\n\n  return new URLSearchParams(stringSearchParams).toString();\n};\n\nexport const getMyIp = async () => {\n  try {\n    const response = await fetch(\"https://api.ipify.org?format=json\");\n    const json = (await response.json()) as any;\n\n    return json?.ip || null;\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const waitInternetConnectionLoop = async (\n  sleepSec = 60,\n  maxRetries = 1000,\n  onWait: () => void\n) => {\n  let retries = 0;\n\n  while (retries < maxRetries) {\n    const myIp = await getMyIp();\n\n    if (myIp) return;\n\n    onWait();\n\n    await sleep(sleepSec);\n\n    retries += 1;\n  }\n\n  throw new Error(\"Max retries to check internet connection failed\");\n};\n","import { HttpsProxyAgent } from \"https-proxy-agent\";\nimport { SocksProxyAgent } from \"socks-proxy-agent\";\nimport { z } from \"zod\";\nimport { ipOrDomainSchema } from \"../zod\";\n\nconst proxySchema = z.object({\n  type: z.union([z.literal(\"https\"), z.literal(\"socks\")]),\n  host: ipOrDomainSchema,\n  port: z\n    .string()\n    .regex(/\\d+/, \"Must be a number\")\n    .transform((str) => Number(str)),\n  username: z.string(),\n  password: z.string(),\n  changeUrl: z.string().url().optional(),\n});\n\nexport type ProxyItem = Omit<z.infer<typeof proxySchema>, \"changeUrl\">;\n\nexport const getProxyAgent = (proxy?: ProxyItem) => {\n  if (!proxy) return undefined;\n\n  const { type, host, port, username, password } = proxy;\n\n  switch (type) {\n    case \"https\": {\n      return new HttpsProxyAgent(\n        `http://${username}:${password}@${host}:${port}`\n      );\n    }\n    case \"socks\": {\n      return new SocksProxyAgent(\n        `socks://${username}:${password}@${host}:${port}`\n      );\n    }\n    default: {\n      throw new Error(`proxy type is not allowed ${type}`);\n    }\n  }\n};\n\nexport const parseProxy = (proxy: string, divider = \";\") => {\n  const [type, host, port, user, pass, changeUrl] = proxy.split(divider);\n  return proxySchema.parse({ type, host, port, user, pass, changeUrl });\n};\n","import { readByLine } from \"../file\";\n\nexport const randomChoice = <T>(array: T[]) =>\n  array[Math.floor(Math.random() * array.length)];\n\nexport const randomInt = (min: number, max: number) => {\n  const roundedMin = Math.ceil(min);\n  const roundedMax = Math.floor(max);\n\n  return Math.floor(Math.random() * (roundedMax - roundedMin + 1)) + roundedMin;\n};\n\nexport const roundToDecimal = (n: number, decimalPlaces: number) => {\n  const number = Number(n);\n\n  if (decimalPlaces < 0) return NaN;\n  const multiplier = Math.pow(10, decimalPlaces);\n  return Math.round(number * multiplier) / multiplier;\n};\n\nexport const randomFloat = (\n  min: number,\n  max: number,\n  decimalPlaces: number\n) => {\n  const rnd = Math.random() * (max - min) + min;\n  if (decimalPlaces === undefined) return rnd;\n  return roundToDecimal(rnd, decimalPlaces);\n};\n\nexport const randomUserAgent = () =>\n  randomChoice(readByLine(\"./assets/user-agents.txt\"));\n\nexport const shuffle = <T>(array: T[]): T[] =>\n  [...array].sort(() => Math.random() - 0.5);\n\nexport const randomChoices = <T>(\n  array: T[],\n  count: number,\n  isDuplicates = true\n): T[] => {\n  if (isDuplicates) {\n    return Array.from({ length: count }).map(() => randomChoice(array));\n  }\n\n  return shuffle(array).slice(0, count);\n};\n\nexport default randomChoices;\n"],"mappings":"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","names":["z","z","z","z","z","z","z"]}